#version 430 core
layout (triangles) in;
layout (triangle_strip, max_vertices = 3) out;

in float pass_rand[];

out vec3 normal;

uniform float time;
uniform mat4 MVP;


vec4 flow(vec4 position, int i)
{
	float magnitude = 2.0;
	vec3 direction =  pass_rand[i] * vec3(
	0 , 
	
		//0.3f * (sin((time  + position.x) * 0.5) + t * pass_rand[i] * cos((pass_rand[i] + position.x) * 0.5)) +
		//cos((time  + position.z) * 0.5)),
		sin(pass_rand[i]) * cos(time) * sin((time + position.x) * 0.2) * cos((time + position.z) * 0.2) + cos(pass_rand[i]) * sin(time) * cos((time + position.z) * 0.2),
	0); 
    return position + vec4(direction, 0.0);
}


vec3 GetNormal()
{
   vec3 a = vec3(MVP * flow(gl_in[0].gl_Position, 0)) - vec3(MVP * flow(gl_in[1].gl_Position, 1));
   vec3 b = vec3(MVP * flow(gl_in[2].gl_Position, 2)) - vec3(MVP * flow(gl_in[1].gl_Position, 1));
   return normalize(cross(a, b));
}  

//vec4 explode(vec4 position, vec3 normal)
//{
    //float magnitude = 2.0;
    //vec3 direction = normal * ((sin(time) + 1.0) / 2.0) * magnitude; 
    //return position + vec4(direction, 0.0);
//} 

float timecutter(float time)
{
	if(time > 3.14)
	{
		time -= 3.14;
	}
	return time;
}

void main() {       
   	normal = GetNormal();
    //gl_Position = explode(gl_in[0].gl_Position, normal);
	gl_Position = MVP * flow(gl_in[0].gl_Position, 0);
    EmitVertex();
   // gl_Position = explode(gl_in[1].gl_Position, normal);
   gl_Position = MVP * flow(gl_in[1].gl_Position , 1);
    EmitVertex();
   // gl_Position = explode(gl_in[2].gl_Position, normal);
   gl_Position = MVP * flow(gl_in[2].gl_Position, 2);
    EmitVertex();

    EndPrimitive();	
}    