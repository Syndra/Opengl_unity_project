#version 430 core

struct light{
float ambientStrength;
float specularStrength;
float lightPower;
vec3 lightColor;
vec3 lightPos;
};

//in vec3 pass_color;
in vec2 pass_uv;
in vec3 normal;
in vec3 fragpos;

out vec4 color;

uniform sampler2D texture2D;

uniform vec3 viewpos;
uniform light lights[20];
uniform int numofLight;
uniform vec3 Color;

void main(){

vec3 viewDir = normalize(viewpos - fragpos);
vec3 norm = normalize(normal);

vec3 diffuse = vec3(0,0,0);
vec3 ambient = vec3(0,0,0);
vec3 specular = vec3(0,0,0);

vec3 texture_color = texture(texture2D, pass_uv).rgb;

for(int i = 0; i < numofLight; i++)
{
	vec3 tempColor = lights[i].lightColor;
	vec3 lightDisVec3 = lights[i].lightPos - fragpos;
	float lightDis = pow(lightDisVec3.x, 2) + pow(lightDisVec3.y, 2) + pow(lightDisVec3.z, 2);
	vec3 lightDir = normalize(lightDisVec3);
	tempColor *= (lights[i].lightPower / lightDis);
	float diff = max(dot(norm, lightDir), 0.0);
	//diffuse += diff * lights[i].lightColor;
	diffuse += diff * tempColor;

	//ambient += lights[i].ambientStrength *  lights[i].lightColor;
	ambient += lights[i].ambientStrength *  tempColor;

	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	specular += lights[i].specularStrength * spec * tempColor;
}

vec3 result = (ambient+diffuse+specular) * Color;

color = vec4(result, 1.f);
}