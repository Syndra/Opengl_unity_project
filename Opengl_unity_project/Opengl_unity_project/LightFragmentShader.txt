#version 430 core

in vec3 pass_color;
in vec3 normal;
in vec3 fragpos;

out vec4 color;

uniform vec3 viewpos;
uniform float ambientStrength;
uniform float specularStrength;
uniform vec3 lightColor;
uniform vec3 lightPos;

void main(){

vec3 viewDir = normalize(viewpos - fragpos);

vec3 norm = normalize(normal);
vec3 lightDir = normalize(lightPos - fragpos);
float diff = max(dot(norm, lightDir), 0.0);
vec3 diffuse = diff * lightColor;

vec3 ambient = ambientStrength *  lightColor;

vec3 reflectDir = reflect(-lightDir, norm);

float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
vec3 specular = specularStrength * spec * lightColor;

vec3 result = (ambient+diffuse+specular) * pass_color;
color = vec4(result, 1.f);
}