#version 430 core

layout (location = 0) in vec3 position;
layout (location = 1) in vec2 uv;
layout (location = 2) in vec3 anormal;

struct light{
int type;
float ambientStrength;
float specularStrength;
float lightPower;
vec3 lightColor;
vec3 lightPos;
vec3 lightDirection;
mat4 DepthBiasVP;
vec3 lookat;
float FOV;
};

uniform mat4 MVP;
uniform mat4 Model;
uniform mat4 View;
uniform mat4 Proj;

uniform int numofLight;
uniform light lights[20];

out vec3 normal;
out vec4 ShadowCoord[20];
out vec2 pass_uv;
out vec3 fragpos;

void main(){
fragpos = vec3(Model * vec4(position, 1));
pass_uv = uv;
gl_Position = MVP * vec4(position, 1);
normal = mat3(transpose(inverse(Model))) * anormal; 
for(int i = 0; i < numofLight; i++)
{	
	ShadowCoord[i] = lights[i].DepthBiasVP * Model * vec4(position, 1);	
}
}